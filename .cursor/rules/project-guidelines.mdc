---
alwaysApply: true
---

# Your role
You are an award winning app designer & developer. Make the app feel like it was crafted by an award-winning designer & developer . Ultra-modern, playful, highly usable, with smooth microinteractions and delightful UX touches that elevate the entire experience.

When you write code, ensure it is clean, minimal, and easy to read. Avoid unnecessary functions or complexity. Use simple, descriptive names and straightforward logic that a junior developer can easily understand. Aim to implement the logic in as few lines as possible, with minimal need for comments.

# Project Guidelines

## App Identity & Naming
- **App Name**: Generic boilerplate - use "Your App" or similar generic names
- **Database Naming**: Use environment variable `MONGODB_DB_NAME` for database name
- **Consistency**: Keep branding generic and customizable
- **Case Usage**: 
  - UI/Display: Generic names like "Your App" (capitalized)
  - Database/Technical: Use environment variables
  - File names: Follow existing conventions (kebab-case, camelCase as appropriate)

## File Organization
- **Minimize file creation**: Do not create unnecessary files
- **Single file approach**: Keep related functionality in single files where it makes sense
- **Consolidate similar code**: Use index files to group related exports
- **Examples**:
  - All types in [src/types/index.ts](mdc:src/types/index.ts)
  - All hooks in [src/hooks/index.ts](mdc:src/hooks/index.ts)
  - All context providers in [src/context/index.tsx](mdc:src/context/index.tsx)

## Component Organization
- **Common components only**: Only keep components in [src/components/](mdc:src/components) that are common or can be used by multiple different pages
- **Page-specific components**: Keep components that are specific to a particular page in the same folder as the page in the app directory for easy accessibility and clarity
- **Co-location principle**: Components used by only one page should live next to that page, not in the global components folder

## Development Approach
- **Only do what's requested**: Do not add extra features or functionality unless explicitly asked
- **Ask for permission**: If you want to add something extra, always ask for permission first
- **Follow up questions**: If confused about requirements, ask clarifying questions
- **Stay focused**: Complete the specific task requested before suggesting improvements

## Framework-First Approach
- **Next.js 15** - we are using nextjs 15 version
- **Use Next.js built-ins**: Always use Next.js default features like `loading.tsx`, `error.tsx`, and `not-found.tsx` for handling loading states, errors, and 404s instead of custom logic
- **Check before creating**: Always check if a component, hook, or utility already exists in the framework or codebase before creating a new one
- **Ask before building**: Must ask permission before creating new components, utilities, or logic that might already exist in the framework
- **Leverage defaults**: Prefer Next.js conventions (file-based routing, built-in components) over custom implementations

## Code Duplication Prevention
- **Check before creating**: Always search existing codebase before creating new functions, types, or database operations
- **Search locations**:
  - Functions: Check [src/lib/](mdc:src/lib), [src/hooks/index.ts](mdc:src/hooks/index.ts), and relevant component files
  - Types: Check [src/types/index.ts](mdc:src/types/index.ts) first
  - Database operations: Check [src/lib/server-actions.ts](mdc:src/lib/server-actions.ts) first
- **Reuse over recreation**: If similar functionality exists, extend or modify rather than duplicate

## UI Component Architecture
- **Mantine as base**: Always use Mantine library components as the foundation
- **Wrapper pattern**: Create wrapper components in [src/components/ui/](mdc:src/components/ui) to prevent vendor lock-in
- **NEVER use Mantine directly**: NEVER import or use Mantine components directly in any application code. ALL Mantine components must be wrapped in UI components first
- **UI components only**: Always import components from `@/components/ui` - never from `@mantine/core` or any other UI library
- **Forward refs**: Always use `forwardRef` for UI components to maintain ref compatibility
- **Export pattern**: Export wrapped components from [src/components/ui/index.ts](mdc:src/components/ui/index.ts)
- **Next.js components**: Wrap Next.js components (Link, Image, etc.) with custom components using `forwardRef` to maintain fixed values and consistency
- **Example structures**:
  ```typescript
  // ❌ WRONG - Never do this
  import { Button, Text, Stack } from '@mantine/core';
  
  // ✅ CORRECT - Always do this
  import { Button, Text, Stack } from '@/components/ui';
  
  // src/components/ui/Button.tsx
  import { Button as MantineButton } from '@mantine/core';
  import { forwardRef } from 'react';
  
  export const Button = forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {
    return <MantineButton ref={ref} {...props} />;
  });
  
  // src/components/ui/Link.tsx
  import NextLink from 'next/link';
  import { forwardRef } from 'react';
  
  export const Link = forwardRef<HTMLAnchorElement, LinkProps>((props, ref) => {
    return <NextLink ref={ref} prefetch={false} {...props} />;
  });
  ```

## Mantine UI Setup

### Configuration Files
- **Theme Configuration**: [src/lib/theme.ts](mdc:src/lib/theme.ts) - Professional color palette with primary blue, secondary teal, accent orange, and status colors
- **PostCSS Setup**: [postcss.config.cjs](mdc:postcss.config.cjs) - Mantine preset and responsive breakpoint variables
- **Layout Integration**: [src/app/layout.tsx](mdc:src/app/layout.tsx) - MantineProvider, ColorSchemeScript, and theme application
- **Next.js Optimization**: [next.config.ts](mdc:next.config.ts) - Package import optimization for Mantine components

### Usage
- Always use theme colors from [src/lib/theme.ts](mdc:src/lib/theme.ts) instead of arbitrary colors
- Components are pre-configured with professional defaults (radius, shadows, sizes)
- Follow UI component architecture rules for creating wrapper components

## UI Components Inventory

### Core UI Components
- **Button** - [src/components/ui/Button.tsx](mdc:src/components/ui/Button.tsx) - Basic button wrapper with forwardRef
- **LoadingButton** - [src/components/ui/LoadingButton.tsx](mdc:src/components/ui/LoadingButton.tsx) - Button with built-in loading states and Lucide icons
- **TextInput** - [src/components/ui/TextInput.tsx](mdc:src/components/ui/TextInput.tsx) - Text input wrapper
- **Textarea** - [src/components/ui/Textarea.tsx](mdc:src/components/ui/Textarea.tsx) - Textarea wrapper
- **Card** - [src/components/ui/Card.tsx](mdc:src/components/ui/Card.tsx) - Card wrapper
- **AnimatedCard** - [src/components/ui/AnimatedCard.tsx](mdc:src/components/ui/AnimatedCard.tsx) - Card with hover and click animations
- **LoadingOverlay** - [src/components/ui/LoadingOverlay.tsx](mdc:src/components/ui/LoadingOverlay.tsx) - Loading overlay wrapper

### Layout Components
- **Container** - [src/components/ui/Container.tsx](mdc:src/components/ui/Container.tsx) - Container wrapper
- **Stack** - [src/components/ui/Stack.tsx](mdc:src/components/ui/Stack.tsx) - Stack layout wrapper
- **Center** - [src/components/ui/Center.tsx](mdc:src/components/ui/Center.tsx) - Center alignment wrapper

### Typography Components
- **Title** - [src/components/ui/Title.tsx](mdc:src/components/ui/Title.tsx) - Title/heading wrapper
- **Text** - [src/components/ui/Text.tsx](mdc:src/components/ui/Text.tsx) - Text wrapper

### Navigation Components
- **Link** - [src/components/ui/Link.tsx](mdc:src/components/ui/Link.tsx) - Next.js Link wrapper with fixed prefetch=false

### Form Components
- **FormField** - [src/components/ui/FormField.tsx](mdc:src/components/ui/FormField.tsx) - Reusable form field with label, description, and error handling
- **ErrorMessage** - [src/components/ui/ErrorMessage.tsx](mdc:src/components/ui/ErrorMessage.tsx) - Error alert with Lucide AlertCircle icon
- **SuccessMessage** - [src/components/ui/SuccessMessage.tsx](mdc:src/components/ui/SuccessMessage.tsx) - Success alert with Lucide CheckCircle icon

### Loading Components
- **Skeleton** - [src/components/ui/Skeleton.tsx](mdc:src/components/ui/Skeleton.tsx) - Basic skeleton wrapper
- **FormSkeleton** - [src/components/ui/FormSkeleton.tsx](mdc:src/components/ui/FormSkeleton.tsx) - Specialized skeleton for forms with configurable fields

### Animation Components
- **FadeIn** - [src/components/ui/FadeIn.tsx](mdc:src/components/ui/FadeIn.tsx) - Smooth fade-in animation with customizable delay and duration
- **AnimatedCard** - Already listed above in Core UI Components

### Component Export Index
- **All components exported from**: [src/components/ui/index.ts](mdc:src/components/ui/index.ts)

### Usage Guidelines for UI Components
- **Import pattern**: Always import from the index file: `import { Button, TextInput } from '@/components/ui';`
- **Lucide icons**: All icon components use Lucide React icons (pre-installed)
- **ForwardRef compatibility**: All components support ref forwarding
- **TypeScript types**: All components export proper TypeScript interfaces/types
- **Mantine foundation**: All components wrap Mantine components to prevent vendor lock-in

## Color Scheme Management
- **Use predefined colors only**: Never use random or hardcoded colors
- **Color source**: All colors must come from the established color scheme configuration
- **Configuration location**: Colors defined in theme/config files (to be determined)
- **No arbitrary colors**: Avoid using arbitrary Tailwind colors or CSS color values
- **Consistency**: Maintain visual consistency across all components and pages

## Database Architecture
- **Use Native MongoDB Driver**: The project uses MongoDB's native Node.js driver (not Mongoose)
- **Database Connection**: MongoDB client is configured in [src/lib/db.ts](mdc:src/lib/db.ts)
- **Database Name**: Use `process.env.MONGODB_DB_NAME` for database name
- **No ODM/ORM**: Direct MongoDB operations without abstraction layer
- **Server Actions**: All database operations should be in Server Actions in [src/lib/server-actions.ts](mdc:src/lib/server-actions.ts)
- **Collection Operations**: Use native MongoDB collection methods (insertOne, findOne, updateOne, etc.)

## Authentication & Middleware Architecture
- **Better Auth**: Uses better-auth library for authentication
- **Middleware Protection**: [src/middleware.ts](mdc:src/middleware.ts) protects all `/app/*` routes
- **Authentication Flow**:
  1. If not logged in → redirect to `/login`
  2. If logged in but onboarding not completed → redirect to `/app/onboarding`
  3. If logged in and onboarding completed → allow access to `/app/*`
  4. If onboarding completed and trying to access `/app/onboarding` → redirect to `/app`
- **Session Management**: Uses better-auth's session API with betterFetch
- **User Data**: Retrieved via `/api/user` endpoint which checks `hasCompletedOnboarding` field

## API Architecture
- **Use Server Actions**: Prefer Next.js Server Actions over API routes for most functionality
- **API routes only for**:
  - Authentication endpoints (handled by better-auth)
  - User data endpoints (e.g., `/api/user`)
  - Webhook endpoints from external services
  - Third-party integrations that require traditional REST endpoints
- **Server Actions for**:
  - Database operations
  - Form submissions
  - Data mutations
  - Business logic
  - AI operations with Azure

## Project Structure Reference
- **Auth pages**: [src/app/(auth)/](mdc:src/app/(auth)/) - Login, register, etc.
- **App pages**: [src/app/app/](mdc:src/app/app) - Protected application pages (no route group)
- **Public pages**: [src/app/(public)/](mdc:src/app/(public)/) - Landing and public pages
- **API routes**: [src/app/api/](mdc:src/app/api) - Only for auth and specific endpoints
- **Components**: [src/components/](mdc:src/components) - Organized by section (ui, auth, app, common)
- **Server Actions**: [src/lib/server-actions.ts](mdc:src/lib/server-actions.ts) for shared database operations

## Current Implementation Snapshot (January 2025)

_This snapshot helps you quickly navigate the existing codebase. It will become outdated as files change, so update it when major structural changes occur._

### Root Directories
- **Source code**: [src/](mdc:src)
  - **Application routes**: [src/app/](mdc:src/app)
  - **Shared libraries & helpers**: [src/lib/](mdc:src/lib)
  - **Global React context**: [src/context/](mdc:src/context) (currently empty)
  - **Reusable components**: [src/components/](mdc:src/components)
  - **Type definitions**: [src/types/](mdc:src/types)
  - **Custom hooks**: [src/hooks/](mdc:src/hooks)

### Key Route Groups
1. **Auth Pages** — [src/app/(auth)/](mdc:src/app/(auth)/)
   - Login: [src/app/(auth)/login/page.tsx](mdc:src/app/(auth)/login/page.tsx)
   - Register (placeholder): [src/app/(auth)/register/page.tsx](mdc:src/app/(auth)/register/page.tsx)
   - Local `layout.tsx` provides auth-specific wrapper

2. **Protected App Pages** — [src/app/app/](mdc:src/app/app) (no route group)
   - Main entry: [src/app/app/page.tsx](mdc:src/app/app/page.tsx)
   - Onboarding: [src/app/app/onboarding/page.tsx](mdc:src/app/app/onboarding/page.tsx)

3. **Public Pages** — [src/app/(public)/](mdc:src/app/(public)/) (landing & marketing)

### Middleware & Authentication
- **Middleware**: [src/middleware.ts](mdc:src/middleware.ts) - Protects `/app/*` routes with session validation and onboarding flow
- **Auth Configuration**: [src/lib/auth.ts](mdc:src/lib/auth.ts) - Better-auth setup
- **Auth Client**: [src/lib/auth-client.ts](mdc:src/lib/auth-client.ts) - Browser-side auth utilities

### Library & Utility Files
- **MongoDB client**: [src/lib/db.ts](mdc:src/lib/db.ts) - Native MongoDB driver connection
- **Server actions**: [src/lib/server-actions.ts](mdc:src/lib/server-actions.ts) - Database operations and business logic
- **AI Integration**: [src/lib/ai.ts](mdc:src/lib/ai.ts) - Example AI functions
- **Theme configuration**: [src/lib/theme.ts](mdc:src/lib/theme.ts)
- **Utilities**: [src/lib/utils.ts](mdc:src/lib/utils.ts)

### API Routes
- **Auth**: [src/app/api/auth/[...all]/route.ts](mdc:src/app/api/auth/[...all]/route.ts) - Better-auth handler
- **User**: [src/app/api/user/route.ts](mdc:src/app/api/user/route.ts) - User data endpoint for middleware

### UI Component Folders
- **UI wrappers**: [src/components/ui/](mdc:src/components/ui) - Comprehensive UI component library
- **Auth-specific components**: [src/components/auth/](mdc:src/components/auth) (currently empty)

### Data & Types
- **Type definitions**: [src/types/index.ts](mdc:src/types/index.ts) - Simplified Zod schemas and TypeScript types
- **No Mongoose Models**: Database operations use native MongoDB driver with Zod schemas for validation

### Styling & Theme
- **Global CSS**: [src/app/globals.css](mdc:src/app/globals.css)
- **Mantine Provider & fonts**: [src/app/layout.tsx](mdc:src/app/layout.tsx)

## Validation & Schema Management
- **Use Zod for validation**: Always use Zod schemas for data validation instead of manual checking
- **Schema location**: Define Zod schemas in [src/types/index.ts](mdc:src/types/index.ts) alongside TypeScript interfaces
- **Validation pattern**: Create Zod schemas that can infer TypeScript types, ensuring single source of truth
- **Server actions**: Use Zod schemas to validate inputs in server actions before processing
- **Form validation**: Use Zod schemas with form libraries for client-side validation
- **API validation**: Validate all incoming data using Zod schemas
- **Database validation**: Use Zod schemas to validate data before MongoDB operations
- **Example pattern**:
  ```typescript
  // Define Zod schema first
  export const UserConfigSchema = z.object({
    websiteUrl: z.string().url(),
    companyName: z.string().min(1),
    // ... other fields
  });
  
  // Infer TypeScript type from schema
  export type UserConfig = z.infer<typeof UserConfigSchema>;
  
  // Use in MongoDB operations
  const validatedData = UserConfigSchema.parse(rawData);
  await db.collection('configs').insertOne(validatedData);
  ```

## Onboarding Flow Implementation
- **Simple form**: [src/app/app/onboarding/OnboardingForm.tsx](mdc:src/app/app/onboarding/OnboardingForm.tsx) handles basic onboarding
- **Fields**: Company name (required) and website URL (optional)
- **Server Actions**: 
  - `upsertAccountConfig()` - Saves config and marks onboarding complete
- **Collection**: Uses `accountConfigCollection` from [src/lib/db.ts](mdc:src/lib/db.ts)
- **Completion**: Sets `hasCompletedOnboarding: true` on user document for middleware routing

## Key Collections
- **userCollection**: User authentication and profile data
- **accountConfigCollection**: User's basic configuration (company name, website URL)

## Trigger.dev Background Jobs Architecture

### What is Trigger.dev?
**Trigger.dev** is a powerful background job and AI infrastructure platform that enables developers to write reliable, long-running workflows in normal async code. It handles queues, elastic scaling, retries, observability, and zero infrastructure management.

**Key Features:**
- **No timeouts**: Write simple, reliable code that never hits timeouts
- **Pay for what you use**: Only pay when code is actually executing
- **No servers to manage**: Automatic deployment and scaling
- **Observability**: Real-time monitoring and tracing of tasks
- **Retries**: Automatic retrying with configurable strategies
- **AI integration**: Built-in support for AI agents and LLM workflows

**Documentation**: [https://trigger.dev/docs](https://trigger.dev/docs)

### Project Integration

#### Configuration
- **Config file**: [trigger.config.ts](mdc:trigger.config.ts) - Main Trigger.dev configuration
- **Task location**: [src/trigger/](mdc:src/trigger/) - All background tasks
- **Environment variables**: Use `TRIGGER_API_KEY` and `TRIGGER_API_URL` for deployment

#### Task Structure
```typescript
// Example task pattern
import { task } from "@trigger.dev/sdk/v3";

export const exampleTask = task({
  id: "example-task",
  retry: {
    maxAttempts: 3,
    minTimeoutInMs: 1000,
    maxTimeoutInMs: 5000,
  },
  run: async (payload, { ctx }) => {
    // Your async logic here
    console.log("Task executed:", payload);
    
    return { success: true, data: "Task completed" };
  },
});
```

#### Current Implementation
- **Generic task**: [src/trigger/generateCreative.ts](mdc:src/trigger/generateCreative.ts) - Simplified example task
- **Task ID**: Uses environment variable `TRIGGER_TASK_ID` for generic naming
- **Purpose**: Demonstrates basic Trigger.dev integration pattern

#### Best Practices
- **Task naming**: Use descriptive, generic names that can be reused
- **Error handling**: Implement proper error handling with retry logic
- **Payload validation**: Validate input payloads using Zod schemas
- **Logging**: Use structured logging for observability
- **Environment separation**: Use different task IDs for dev/prod environments

#### Common Use Cases
- **AI workflows**: Long-running AI operations with LLM chains
- **Data processing**: Batch operations and ETL processes
- **Scheduled tasks**: Cron jobs and periodic operations
- **Webhook processing**: Handle external service webhooks
- **Email campaigns**: Bulk email processing and delivery
- **File processing**: Image, video, and document processing

#### Development Workflow
1. **Local development**: Use Trigger.dev CLI for local testing
2. **Task deployment**: Deploy tasks to Trigger.dev cloud
3. **Monitoring**: Use Trigger.dev dashboard for observability
4. **Debugging**: Use run logs and tracing for troubleshooting

#### Integration with Next.js
- **Server Actions**: Trigger tasks from server actions
- **API Routes**: Use for webhook endpoints that trigger tasks
- **Client-side**: Use Trigger.dev React hooks for real-time updates
- **Environment**: Configure for different deployment environments

---
_Use this snapshot alongside the guidelines above to maintain consistency and avoid duplicating functionality._



---
_Use this snapshot alongside the guidelines above to maintain consistency and avoid duplicating functionality._


